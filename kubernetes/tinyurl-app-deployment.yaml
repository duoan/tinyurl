# application-k8s.yml config for your Spring Boot app
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tinyurl-app
  labels:
    app: tinyurl-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: tinyurl-app
  template:
    metadata:
      name: tinyurl-app
      labels:
        app: tinyurl-app
    spec:
      containers:
        - name: tinyurl-app
          image: docker.io/victorduoan/tinyurl:0.0.1-SNAPSHOT
          imagePullPolicy: Never
          ports:
            - containerPort: 8080
              protocol: TCP
          env:
            # Spring profile
            - name: SPRING_PROFILES_ACTIVE
              value: "prod"
            # Primary database configuration
            - name: SPRING_DATASOURCE_PRIMARY_URL
              value: "jdbc:postgresql://postgres-primary-service:5432/mydatabase"
            - name: SPRING_DATASOURCE_PRIMARY_USERNAME
              value: "myuser"
            - name: SPRING_DATASOURCE_PRIMARY_PASSWORD
              value: "secret"
            # Replica database configuration
            - name: SPRING_DATASOURCE_REPLICA_URL
              value: "jdbc:postgresql://postgres-replica-service:5432/mydatabase"
            - name: SPRING_DATASOURCE_REPLICA_USERNAME
              value: "myuser"
            - name: SPRING_DATASOURCE_REPLICA_PASSWORD
              value: "secret"
            # Redis configuration remains the same
            - name: SPRING_REDIS_HOST
              value: "tinyurl-redis-service"
            - name: SPRING_REDIS_PORT
              value: "6379"
            # Additional JPA configurations
            - name: SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT
              value: "org.hibernate.dialect.PostgreSQLDialect"
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: "update"
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: tinyurl-app-service
spec:
  type: NodePort  # for local test
  selector:
    app: tinyurl-app
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30080
